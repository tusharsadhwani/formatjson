//! Validates the tokens generated by the [tokenizer][crate::tokenizer].
use crate::{tokenizer::Token, FormatJsonError};

/// Validates the tokens generated by the [tokenizer][crate::tokenizer].
pub fn validate(tokens: Vec<Token>) -> Result<(), FormatJsonError> {
    let mut tokens = tokens.iter();
    while let Some(token) = tokens.next() {
        // Here, we recursively consume these tokens by passing them to
        // functions `validate_array` and `validate_object`.
        //
        // String, numbers, booleans and null are valid by themselves as tokens,
        // and brackets comma and colon are not, but arrays and objects can be
        // infinitely nested with other arrays and objects. Which is why we need
        // to create the two functions, as they will recursively call each other
        // during the validation process.
        //
        // This is exactly the same process required to parse the code and build
        // an AST from the tokens, andthis  along with the `./nodes.rs` can
        // become the implementation for a JSON AST as well.
    }
    Ok(())
}
